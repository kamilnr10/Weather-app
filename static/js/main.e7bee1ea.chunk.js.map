{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","components/loading.js","App.js","serviceWorker.js","index.js"],"names":["Title","SearchCity","props","className","onSubmit","loadWeather","type","placeholder","value","onChange","inChange","required","Weather","city","error","country","description","src","icon","alt","Math","round","temp","latitude","longtitude","humidity","pressure","tempMin","tempMax","wind","LoadingPage","App","setInputValue","event","setState","target","state","icons","imBusy","getWeather","bind","preventDefault","this","axios","get","then","response","console","log","status","data","name","sys","weather","coord","lat","lon","main","temp_min","temp_max","speed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e7bee1ea.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div>\n      <h1>Aplikacja pogodowa</h1>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n\nconst SearchCity = props => {\n  return (\n    //     <div class=\"input-group mb-3\">\n    //   <input type=\"text\" class=\"form-control\" placeholder=\"Recipient's username\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\">\n    //   <div class=\"input-group-append\">\n    //     <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Button</button>\n    //   </div>\n    // </div>\n    <form className=\"input-group mb-3\" onSubmit={props.loadWeather}>\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        placeholder=\"Wpisz miasto...\"\n        value={props.value}\n        onChange={props.inChange}\n        required={true}\n      />\n      <button className=\"search\">Sprawdź pogodę</button>\n      <hr></hr>\n    </form>\n  );\n};\n\nexport default SearchCity;\n","import React from \"react\";\n\nconst Weather = props => {\n  if (props.city === \"\") {\n    return null;\n  } else if (props.error === true) {\n    return <p>Podaj porawną nazwę miasta</p>;\n  } else\n    return (\n      <div className=\"box info\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h5>Miasto: {props.city}</h5>\n          </div>\n          <div className=\"col\">\n            <h5>Państwo: {props.country} </h5>\n          </div>\n        </div>\n        <hr />\n        <div>\n          <p>Opis pogody: {props.description}</p>\n        </div>\n        <div>\n          <img\n            src={`https://openweathermap.org/img/wn/${props.icon}@2x.png`}\n            alt=\"ikona\"\n            className=\"img-thumbnail\"\n          />\n        </div>\n        <div>\n          <h5>\n            Temperatura: {Math.round(props.temp)}\n            <span>&#176;C</span> <i className=\"fas fa-thermometer-half\"></i>\n          </h5>\n        </div>\n        <hr />\n        <div className=\"row\">\n          <div className=\"col\">\n            <p>\n              Szerokość geograficzna: {props.latitude}&#176;{\" \"}\n              <i className=\"fas fa-globe\"></i>\n            </p>\n          </div>\n          <div className=\"col\">\n            <p>\n              Długość geograficzna: {props.longtitude}&#176;{\" \"}\n              <i className=\"fas fa-globe\"></i>\n            </p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <h5>\n              Wilgotność: {props.humidity}\n              <span>%</span> <i className=\"fas fa-tint\"></i>\n            </h5>\n          </div>\n          <div className=\"col\">\n            <h5>Ciśnienie: {props.pressure}hPa</h5>\n          </div>\n        </div>\n        <hr />\n        <h5>\n          Temperatura min: {Math.round(props.tempMin)}\n          <span>&#176;C</span> <i className=\"fas fa-temperature-low\"></i>\n        </h5>\n        <h5>\n          Temperatura max: {Math.round(props.tempMax)}\n          <span>&#176;C</span> <i className=\"fas fa-temperature-high\"></i>\n        </h5>\n        <h5>\n          Wiatr: {props.wind} <span>km/h </span>\n          <i className=\"fas fa-wind\"></i>\n        </h5>\n      </div>\n    );\n};\n\nexport default Weather;\n","import React from \"react\";\n\nconst LoadingPage = () => {\n  return (\n    <div>\n      <h1>Loading</h1>\n    </div>\n  );\n};\n\nexport default LoadingPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Title from \"./components/title\";\nimport SearchCity from \"./components/form\";\nimport Weather from \"./components/weather\";\nimport LoadingPage from \"./components/loading\";\n\n// ApiKey f61fb98da365398f633294312b2e812f\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      city: \"\",\n      country: \"\",\n      description: \"\",\n      icons: \"\",\n      latitude: \"\",\n      longtitude: \"\",\n      temp: \"\",\n      humidity: \"\",\n      pressure: \"\",\n      tempMin: \"\",\n      tempMax: \"\",\n      wind: \"\",\n      imBusy: false,\n      error: false\n    };\n    this.getWeather = this.getWeather.bind(this);\n    this.setInputValue = this.setInputValue.bind(this);\n  }\n\n  setInputValue = event => {\n    this.setState({\n      value: event.target.value\n    });\n  };\n\n  getWeather(event) {\n    event.preventDefault();\n    this.setState({\n      imBusy: true\n    });\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=a229b7d1f6ac2bfc483e9f7f9024bfdd&units=metric`\n      )\n      .then(\n        response => {\n          console.log(response);\n          if (response.status === 200) {\n            this.setState({\n              city: response.data.name,\n              country: response.data.sys.country,\n              description: response.data.weather[0].description,\n              icon: response.data.weather[0].icon,\n              latitude: response.data.coord.lat,\n              longtitude: response.data.coord.lon,\n              temp: response.data.main.temp,\n              humidity: response.data.main.humidity,\n              pressure: response.data.main.pressure,\n              tempMin: response.data.main.temp_min,\n              tempMax: response.data.main.temp_max,\n              wind: response.data.wind.speed,\n              imBusy: false,\n              error: false\n            });\n          } else {\n            this.setState({\n              imBusy: true\n            });\n          }\n        },\n        error => {\n          console.log(error);\n          this.setState({\n            imBusy: false,\n            error: true\n          });\n        }\n      );\n  }\n\n  render() {\n    const { imBusy } = this.state;\n\n    if (imBusy === true) {\n      return <LoadingPage />;\n    } else {\n      return (\n        <div className=\"App\">\n          <div className=\"container\">\n            <Title />\n            <SearchCity\n              value={this.state.value}\n              inChange={this.setInputValue}\n              loadWeather={this.getWeather}\n            />\n            <div className=\"wrapper\">\n              <Weather\n                city={this.state.city}\n                country={this.state.country}\n                description={this.state.description}\n                icon={this.state.icon}\n                temp={this.state.temp}\n                latitude={this.state.latitude}\n                longtitude={this.state.longtitude}\n                humidity={this.state.humidity}\n                pressure={this.state.pressure}\n                tempMin={this.state.tempMin}\n                tempMax={this.state.tempMax}\n                wind={this.state.wind}\n                error={this.state.error}\n              />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}